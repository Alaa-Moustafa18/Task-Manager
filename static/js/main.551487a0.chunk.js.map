{"version":3,"sources":["Reducers/TaskReducer.js","Contexts/TaskContext.js","Components/TaskDetails.js","Components/TaskList.js","Components/Header.js","Components/TaskForm.js","App.js","serviceWorker.js","index.js"],"names":["taskReducer","state","action","type","newTask","id","uuid","title","payload","addedTask","tasks","removedTask","filter","task","currentTask","updatedNote","map","TaskContext","createContext","TaskContextProvider","props","useReducer","initialState","localStorage","getItem","JSON","parse","dispatch","useEffect","setItem","stringify","Provider","value","children","TaskDetails","useContext","className","onClick","TaskList","length","key","Header","TaskForm","ref","useRef","useState","setTitle","current","focus","selectedTask","find","onSubmit","e","preventDefault","trim","alert","onChange","target","placeholder","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.551487a0.chunk.js","sourcesContent":["import {v1 as uuid} from \"uuid\";\r\n\r\nexport const taskReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_TASK\":        \r\n        const newTask = {\r\n            id:uuid(),\r\n            title: action.payload\r\n        }    \r\n        const addedTask = [...state.tasks, newTask]\r\n        return {\r\n            ...state,\r\n            tasks:  addedTask\r\n        } \r\n        case \"REMOVE_TASK\": \r\n            const removedTask = state.tasks.filter(task => task.id !== action.payload ) \r\n            return {\r\n                ...state,\r\n                tasks: removedTask\r\n            }\r\n        case \"SET_CURRENT_TASK\":\r\n            return {\r\n                ...state, \r\n                currentTask: action.payload\r\n        }  \r\n        case \"UPDATE_TASK\":           \r\n            const updatedNote =  {       \r\n                id:    state.currentTask,       \r\n                title: action.payload\r\n            }           \r\n            const updatedNotes = state.tasks.map(task => {\r\n                if(task.id === state.currentTask){\r\n                    return updatedNote\r\n                }else{\r\n                    return task\r\n                }\r\n            })  \r\n              return {\r\n                currentTask: null,\r\n                tasks: updatedNotes\r\n              };\r\n            \r\n        case \"CLEAR\":            \r\n            return {\r\n                currentTask:null,\r\n                tasks:[]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext,  useReducer, useEffect } from 'react';\r\nimport { taskReducer } from '../Reducers/TaskReducer';\r\n\r\nexport const TaskContext = createContext();\r\n\r\nconst TaskContextProvider = (props) => {   \r\n        \r\n    \r\n    const [state, dispatch] = useReducer(taskReducer,[], () =>  {\r\n        const initialState = localStorage.getItem(\"tasks\"); \r\n        return {\r\n            currentTask : null,\r\n            tasks: initialState ? JSON.parse(initialState) : []\r\n        }\r\n    })    \r\n    useEffect(() => {    \r\n        localStorage.setItem(\"tasks\", JSON.stringify(state.tasks))       \r\n    },\r\n    [state.tasks])\r\n    return ( \r\n        <TaskContext.Provider value={{state, dispatch}}>\r\n            {props.children}\r\n        </TaskContext.Provider>\r\n     );\r\n}\r\n \r\nexport default TaskContextProvider;","import React, { useContext }  from 'react'\r\nimport { TaskContext } from '../Contexts/TaskContext'\r\n\r\nexport const TaskDetails = ({task}) => {\r\n    const { dispatch } = useContext(TaskContext);    \r\n       \r\n    return(\r\n        <li className=\"list-item\">\r\n            <span>{task.title} </span> \r\n            <div>               \r\n                <button className=\"btn-edit task-btn\"   onClick={ () => dispatch({type:'SET_CURRENT_TASK', payload: task.id}) }><i className=\"fas fa-pen\"></i></button>\r\n                <button className=\"btn-delete task-btn\" onClick={()  => dispatch({type:'REMOVE_TASK', payload:task.id }) }><i className=\"fas fa-trash-alt\"></i></button>\r\n            </div>\r\n        </li>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { TaskContext } from '../Contexts/TaskContext';\r\nimport { TaskDetails } from './TaskDetails';\r\n\r\nconst TaskList = () => {\r\n    const { state } = useContext(TaskContext)   \r\n    return ( \r\n        <div className=\"task-list\">\r\n            {\r\n                state.tasks.length? (\r\n                <ul className=\"list\">           \r\n                    { \r\n                        state.tasks.map( task => {\r\n                            return (\r\n                                <TaskDetails key={task.id} task={task}/>                      \r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n                ):(\r\n                    <div className=\"no-tasks\">No Tasks</div>\r\n                )\r\n            }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TaskList;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n      <div className='header'>\r\n        <h1>Task Manager</h1>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default Header","import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { TaskContext } from '../Contexts/TaskContext';\r\n\r\nconst TaskForm = ({task}) => {\r\n    let ref= useRef()\r\n    const { state, dispatch } = useContext(TaskContext)   \r\n    const [title, setTitle] = useState('')   \r\n    const clear = () => {       \r\n        dispatch({type:'CLEAR'})\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(title.trim() === \"\"){\r\n            alert (\"can't add a blank note\")\r\n        }else{\r\n            if(state.currentTask === null){\r\n                dispatch({type:\"ADD_TASK\", payload: title})\r\n            }else{                \r\n                dispatch({type:\"UPDATE_TASK\", payload:title})             \r\n            }       \r\n            setTitle('');\r\n        }\r\n    }\r\n    useEffect(()=>{        \r\n        ref.current.focus()\r\n        if(state.currentTask !== null){             \r\n            let selectedTask =    state.tasks.find(task =>  task.id === state.currentTask)  \r\n            setTitle(selectedTask.title)\r\n        }       \r\n    },[state.currentTask] )\r\n   \r\n    return ( \r\n        <form onSubmit={handleSubmit} className=\"form\">\r\n            <input value={title} ref={ref} onChange={(e) => setTitle(e.target.value)} placeholder=\"add title...\"  className=\"task-input\"/>\r\n            <div className=\"buttons\">\r\n                 <button type=\"submit\" className=\"btn add-task-btn\"> { state.currentTask === null ? \"Add Task\" : \"Update Task\"}</button>                  \r\n                \r\n                <button type=\"button\" className=\"btn clear-btn\" onClick={clear} disabled= { state.tasks.length ?  false :  true}  >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default TaskForm;","import React from 'react';\nimport './App.css';\nimport TaskContextProvider from './Contexts/TaskContext';\nimport TaskList from './Components/TaskList';\nimport Header from './Components/Header';\nimport TaskForm from './Components/TaskForm';\n\nfunction App() {\n  return (\n    <TaskContextProvider>\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <Header />\n          <div className=\"main\">\n              <TaskForm />\n              <TaskList />\n            </div>\n          </div>\n      </div>\n    </TaskContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}